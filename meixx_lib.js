if (!Array.prototype.indexOf) {	Array.prototype.indexOf = function(elt){		var len = this.length >>> 0;		var from = Number(arguments[1]) || 0;		from = (from < 0) ? Math.ceil(from) : Math.floor(from);		if (from < 0) from += len;		for (; from < len; from++) {			if (from in this && this[from] === elt) return from;		}		return -1;	};}if (!Array.prototype.lastIndexOf) {	Array.prototype.lastIndexOf = function(elt){		var len = this.length;		var from = Number(arguments[1]);		if (isNaN(from)) {			from = len - 1;		} else {			from = (from < 0) ? Math.ceil(from) : Math.floor(from);			if (from < 0) from += len;			else if (from >= len) from = len - 1;		}		for (; from > -1; from--) {			if (from in this && this[from] === elt) return from;		}		return -1;	};}if (!Array.prototype.every) {	Array.prototype.every = function(fun){		var len = this.length >>> 0;		if (typeof fun != "function") throw new TypeError();		var thisp = arguments[1];		for (var i = 0; i < len; i++) {			if (i in this && !fun.call(thisp, this[i], i, this)) return false;		}		return true;	};}if (!Array.prototype.filter) {	Array.prototype.filter = function(fun){		var len = this.length >>> 0;		if (typeof fun != "function") throw new TypeError();		var res = [];		var thisp = arguments[1];		for (var i = 0; i < len; i++) {			if (i in this) {				var val = this[i];				if (fun.call(thisp, val, i, this)) res.push(val);			}		}		return res;	};}if (!Array.prototype.forEach) {	Array.prototype.forEach = function(fun){		var len = this.length >>> 0;		if (typeof fun != "function") throw new TypeError();		var thisp = arguments[1];		for (var i = 0; i < len; i++) {			if (i in this) fun.call(thisp, this[i], i, this);		}	};}if (!Array.prototype.map) {	Array.prototype.map = function(fun){		var len = this.length >>> 0;		if (typeof fun != "function") throw new TypeError();		var res = new Array(len);		var thisp = arguments[1];		for (var i = 0; i < len; i++) {			if (i in this) res[i] = fun.call(thisp, this[i], i, this);		}		return res;	};}if (!Array.prototype.some) {	Array.prototype.some = function(fun){		var i = 0, len = this.length >>> 0;		if (typeof fun != "function") throw new TypeError();		var thisp = arguments[1];		for (; i < len; i++) {			if (i in this && fun.call(thisp, this[i], i, this)) return true;		}		return false;	};}if (!Array.prototype.reduce) {	Array.prototype.reduce = function(fun){		var len = this.length >>> 0;		if (typeof fun != "function") throw new TypeError();		if (len == 0 && arguments.length == 1) throw new TypeError();		var i = 0;		if (arguments.length >= 2) {			var rv = arguments[1];		} else {			do {				if (i in this) {					var rv = this[i++];					break;				}				if (++i >= len) throw new TypeError();			} while (true);		}		for (; i < len; i++) {			if (i in this) rv = fun.call(null, rv, this[i], i, this);		}		return rv;	};}if (!Array.prototype.reduceRight) {	Array.prototype.reduceRight = function(fun){		var len = this.length >>> 0;		if (typeof fun != "function") throw new TypeError();		if (len == 0 && arguments.length == 1) throw new TypeError();		var i = len - 1;		if (arguments.length >= 2) {			var rv = arguments[1];		} else {			do {				if (i in this) {					var rv = this[i--];					break;				}				if (--i < 0) throw new TypeError();			} while (true);		}		for (; i >= 0; i--) {			if (i in this) rv = fun.call(null, rv, this[i], i, this);		}		return rv;	};}if (!String.prototype.trim) {	String._rTrim_ = /^\s+|\s+$/g;	String.prototype.trim = function(){		return this.replace(String._rTrim_, '');	};	String.prototype.trimLeft = function(){		return (this + '$').replace(String._rTrim_, '').slice(0, -1);	};	String.prototype.trimRight = function(){		return ('^' + this).replace(String._rTrim_, '').slice(1);	};	String.trim = function(str){		return String.prototype.trim.call(str);	};	String.trimLeft = function(str){		return String.prototype.trimLeft.call(str);	};	String.trimRight = function(str){		return String.prototype.trimRight.call(str);	};}(function(){	var docEl = document.documentElement, filename = /^.*\.([^.]+\.[^.]+)$/.test(location.host) ? RegExp.$1 : 'localfile', browser = $.browser.msie ? 'IE' : 'FF', FN = {		getIE: function(key){			docEl.load(filename);			return docEl.getAttribute(key);		},		setIE: function(key, value){			docEl.load(filename);			docEl.setAttribute(key, value);			docEl.save(filename);			return true;		},		delIE: function(key){			docEl.load(filename);			docEl.expires = new Date('1990/1/1').toUTCString();			docEl.save(filename);		},		getFF: function(key){			return sessionStorage.getItem(key)		},		setFF: function(key, value){			sessionStorage.setItem(key, value)		},		delFF: function(key){			sessionStorage.removeItem(key)		}	};	if ($.browser.msie) {		docEl.addBehavior("#default#userdata");	}	$.userdata = function(key, value){		if (typeof value != 'undefined') {			if (value === null) {				FN['del' + browser](key);			} else {				FN['set' + browser](key, value);			}		} else {			return FN['get' + browser](key);		}	}	if (!$.browser.msie && !location.host) {		$.userdata = $.cookie;	}})();(function(HTTP){	var a = function(){		return new XMLHttpRequest();	}, b = function(){		return new ActiveXObject("Msxml2.XMLHTTP");	}, c = function(){		return new ActiveXObject("Microsoft.XMLHTTP");	};	HTTP._factory = null;	for (var i = 0, _factories = [a, b, c], l = _factories.length; i < l; i++) {		try {			var factory = _factories[i], request = factory();			if (request != null) {				HTTP._factory = factory;				break;			}		} catch (e) {			continue;		}	}	if (!HTTP._factory) {		return;	}	HTTP.newRequest = function(successHandler, errorHandler, progressHandler){		var request = HTTP._factory();		request.onreadystatechange = function(){			if (request.readyState == 4) {				if (request.status == 200) {					successHandler(request.responseText);				} else {					if (errorHandler) {						errorHandler(request.status, request.statusText);					} else {						successHandler(null);					}				}			} else if (progressHandler) {				progressHandler(request);			}		};		return request;	};	HTTP.encodeFormData = function(data){		var pairs = [], name;		for (name in data) {			pairs.push(encodeURIComponent(name) + '=' + encodeURIComponent(String(data[name])));		}		return pairs.join('&').replace(/%20/g, "+");	};	HTTP.post = function(url, parameters, successHandler, errorHandler, options){		var request = HTTP.newRequest(successHandler, errorHandler, options.progressHandler);		request.open("POST", url);		request.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");		request.send(parameters);		return request;	};	HTTP.get = function(url, parameters, successHandler, errorHandler, options){		var request = HTTP.newRequest(successHandler, errorHandler, options.progressHandler);		request.open("GET", url + (parameters ? ('?' + HTTP.encodeFormData(parameters)) : ''));		request.send(null);		return request;	};})(window.HTTP = {});Array.prototype.randSort = function(){	return this.sort(function(){		return Math.random() > 0.2;	});};function see(){	alert(Array.prototype.join.call(arguments, '\n'));}$.extend(Date.prototype, {	isLeapYear: function(){		var year = this.getFullYear();		return (0 == year % 4 && ((year % 100 != 0) || (year % 400 == 0)));	},	format: function(fmt, isLeftPad){		if (typeof(fmt) == 'undefined' || typeof(fmt) == 'boolean') {			isLeftPad = !!fmt;			fmt = '{n}-{y}-{r} {s}:{f}:{m}';		}		var ar = 'FullYear,Year,Month,Date,Hours,Minutes,Seconds'.split(','), o = {}, size = isLeftPad ? 2 : 1, date = this;		$.each('nNyrsfm'.split(''), function(i, n){			o[n] = date['get' + ar[i]]().toString().leftPad(size, '0');		});		o.y = (o.y - 0 + 1).toString().leftPad(size, '0');		return fmt.toString().format(o);	}});$.extend(String.prototype, {	empty: function(){		return this.trim() === '';	},	lenW: function(){		return this.replace(/[^\x00-\xff]/g, "**").length;	},	format: function(){		var args = Array.prototype.slice.call(arguments), v;		if (args.length == 1 && typeof(args[0]) == 'object') {			args = args[0];		}		return this.replace(/\{([\d\w\.]+)\}/g, function(m, n){			v = args[n];			return v === undefined ? m : v;		});	},	leftPad: function(size, ch){		return size <= this.length ? this : (new Array(size - this.length + 1).join(ch || ' ') + this);	},	html: function(isdecode){		var ar = ['&', '&amp;', '<', '&lt;', '>', '&gt;', ' ', '&nbsp;', '"', '&quot;', "'", '&#39;', '\\r', '<br>', '\\n', '<br>'];		if (isdecode) ar.reverse();		for (var i = 0, r = this; i < ar.length; i += 2) 			r = r.replace(new RegExp(ar[i], 'g'), ar[1 + i]);		return r;	},	toJson: function(lvl_1, lvl_2, fn){		fn = $.isFunction(fn) ? fn : (function(v){			return v		});		var ar = $.grep(this.split(lvl_1), function(v){			return v.trim() != ''		});		var r = {};		$.each(ar, function(i, v){			var a = v.split(lvl_2);			if (a[1] != undefined) r[a[0]] = fn(a[1]);		});		return r;	},	toArray: function(a){		var arRslt, tmp;		switch (a.length) {			case 0:				arRslt = [this];				break;			case 1:				arRslt = this.split(a[0]);				arRslt.length && arRslt[arRslt.length - 1].empty() && arRslt.pop();				break;			case 2:				arRslt = this.toJson(a[0], a[1]);				break;			default:				arRslt = [];				tmp = this.split(a[0]);				if (tmp[tmp.length - 1].empty()) {					tmp.pop();				}				$.each(tmp, function(i, n){					arRslt.push(n.toArray(a.slice(1)));				});				break;		}		return arRslt;	}});function copyText(txt, cbf){	if (window.clipboardData && window.clipboardData.setData) {		if (!window.clipboardData.setData("Text", txt)) {			msg("复制文本内容失败!");			return false;		}	} else if ($.browser.opera && navigator.mimeTypes["application/x-shockwave-flash"]) {		var d = document.createElement("div");		document.getElementsByTagName("body")[0].appendChild(d);		d.innerHTML = "<embed src='/flash/clipboard.swf' FlashVars='clipboard=" + escape(txt) + "' width='0' height='0' type='application/x-shockwave-flash'></embed>";	} else if (window.netscape) {		try {			netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect")		} catch (e) {			msg('您的FireFox限制剪贴板操作!请打开 about:config 页面开启此功能!');			return false;		}		try {			clip = Components.classes["@mozilla.org/widget/clipboard;1"].createInstance(Components.interfaces.nsIClipboard);			trans = Components.classes["@mozilla.org/widget/transferable;1"].createInstance(Components.interfaces.nsITransferable)		} catch (e) {			return false;		}		trans.addDataFlavor("text/unicode");		var oStr = Components.classes["@mozilla.org/supports-string;1"].createInstance(Components.interfaces.nsISupportsString);		oStr.data = txt;		trans.setTransferData("text/unicode", oStr, txt.length * 2);		try {			clipid = Components.interfaces.nsIClipboard		} catch (e) {			return false;		}		clip.setData(trans, null, clipid.kGlobalClipboard);	} else {		msg("对不起，该功能只支持MSIE，firefox和opera浏览器！");		return false;	}	if (cbf instanceof Function) cbf();}function getHrefArgs(name){	return (getHrefArgs.args ||	(getHrefArgs.args = location.search.slice(1).toJson('&', '=', function(v){		return decodeURIComponent(v);	})))[name];}