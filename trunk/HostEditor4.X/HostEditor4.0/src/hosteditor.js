/** * 添加为环境	Y * 添加一个新环境（拖动一条规则到env）	Y * 删除一个环境	Y * 添加规则到一个环境		Y * 从一个环境删除一条规则		Y * 复制一个环境		Y * 打开一个环境时同步展示右边的规则 * 选择一个规则时同步展示左边的环境 * 删除一个规则时，检查是否该规则在环境中 * * 新手帮助(win7) * 获得win7系统权限功能 * 快捷键功能 * 快速查找功能 * 分享功能 * 备份和恢复功能 * 设置常用url功能 * 清除浏览器缓存功能 * 反馈功能 * 检查更新 * VPN功能 * 统计功能 */(function($){	function Accordion(cont, opt){		this.options = opt;		this.$cont = $(cont);		this.$headers = this.$cont.find(this.options.headerSelector);		this.$contents = this.$headers.next();		this.init();	}	Accordion.prototype = {		init: function(){			this.$contents.hide();			this.$cont.addClass('ui-accordion');			this.$headers.addClass('ui-accordion-header ui-corner-all');			this.$contents.addClass('ui-accordion-content ui-corner-bottom');			var me = this;			if (me.options.active) {				me.options.change({}, me.enable(me.options.active));			}			me.$headers.die().live('click', function(evt){				me.toggle($(this), function(ui){					me.options.change({}, ui);				});			});		},		getContents: function(){			return this.$contents;		},		toggle: function(selector, callback){			var $header = selector.jquery ? selector : this.$headers.filter(selector).first(), selected = $header.hasClass(this.options.selectedClass);			return this[selected ? 'disable' : 'enable']($header, callback);		},		enable: function(selector, callback){			var $header = selector.jquery ? selector : this.$headers.filter(selector).first(), $content, rtn = {};			if ($header.size() && !$header.hasClass(this.options.selectedClass)) {				if (this.latest) {					rtn.oldHeader = this.latest;					rtn.oldContent = this.latest.next();					this.latest.filter($header).size() || this.disable(this.latest);				}				$header.removeClass('ui-corner-all').addClass(this.options.selectedClass + ' ui-corner-top');				($content = $header.next()).slideDown(100, function(){					$.isFunction(callback) && callback(rtn);				});				rtn.newHeader = $header;				rtn.newContent = $content;				this.latest = $header;			}			return rtn;		},		disable: function(selector, callback){			var me = this, $header = selector.jquery ? selector : this.$headers.filter(selector).first(), $content, rtn = {};			if ($header.size() && $header.hasClass(this.options.selectedClass)) {				this.latest = null;				($content = $header.next()).slideUp(100, function(){					$header.removeClass(me.options.selectedClass + ' ui-corner-top').addClass('ui-corner-all');					$.isFunction(callback) && callback(rtn);				});				rtn.oldHeader = $header;				rtn.oldContent = $content;			}			return rtn;		},		current: function(){			return this.latest;		},		collapseLast: function(){			this.latest && this.disable(this.latest);		},		distroy: function(){			this.$headers.die().removeClass(this.options.selectedClass + ' ui-corner-top').addClass('ui-corner-all');		}	};	$.fn.accordion = function(opt){		if (typeof(opt) == 'string') {			var inst = $(this).data('accordion');			if (inst instanceof Accordion) { return inst[opt]($.makeArray(arguments).slice(1)); }		} else {			opt = $.extend({				headerSelector: 'h3',				active: null,				selectedClass: 'ui-accordion-selected',				change: $.noop			}, opt);			return this.each(function(_, cont){				var ins = $(this).data('accordion');				ins && ins.distroy();				$(this).data('accordion', new Accordion(cont, opt));			});		}	};})(jQuery);var Wnd = {	timer: 0,	setRect: function(w, h){		var sw = screen.availWidth, sh = screen.availHeight, bdy = document.body;		try {			resizeTo(w, h);			resizeTo(w = w + w - bdy.clientWidth, h = h + h - bdy.clientHeight);			moveTo(Math.max((sw - w) / 2, 0), (sh - h) / 2);		} catch (ex) {		}		$(window).resize(Wnd.setLayout);		Wnd.setLayout();	},	setLayout: function(evt){		var $bdy = $(document.body);		Json.size.width = $bdy.width();		Json.size.height = $bdy.height();		Editor.main.add(Editor.env).height(Json.size.height - Editor.foot.outerHeight());		if (evt) {			Wnd.timer && clearTimeout(Wnd.timer);			Wnd.timer = setTimeout(function(){				Editor.save(null);			}, 200);		}	}};var Host = {	selected: 'selected',	isEnabled: function($dd){		return $dd.hasClass(Host.selected);	},	enable: function(json){		var $dd = (json && json.jquery ? json : Editor.getItemElement(json)).not('.' + Host.selected);		if ($dd.size()) {			$dd.parent().find('dd').removeClass(Host.selected);			$dd.addClass(Host.selected);		}		return $dd;	},	disable: function(json){		var $dd = (json && json.jquery ? json : Editor.getItemElement(json)).filter('.' + Host.selected);		if ($dd.size()) {			$dd.removeClass(Host.selected);		}		return $dd;	},	getAllEffect: function(){		return Editor.main.find('dd.' + Host.selected);	},	copy: function(text){		return window.clipboardData.setData("Text", text);	},	paste: function($tar){		var txt = window.clipboardData.getData("text") || '';		txt = /\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/.test(txt) ? txt : '';		return txt && $tar && $tar.val(txt);	},	getJsonFromText: function(text){		var ar = $.trim(text).split(/(\s*\n)+\s*/), o = {}, dupIP = function(n, i){			return n.i == ip;		};		var rWhite = /\s/, rRules = /^(#)*\s*(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})((?:\s+[^#\s]+)+)(?:\s*#(.*))?$/;		$.each(ar, function(i, t, m, sharp, ip){			if (m = rRules.exec($.trim(t))) {				sharp = m[1] || '', ip = m[2];				$.each($.trim(m[3]).split(rWhite), function(j, dm){					if (!o[dm]) {						o[dm] = {							r: []						};					}					if ($.grep(o[dm], dupIP).length == 0) {						o[dm].r.push({							s: sharp,							i: ip,							d: dm						});					}				});			}		});		delete o['rhino.acme.com'];		delete o['x.acme.com'];		return o;	},	readConfig: function(text, json){		if (!(json = File.isWell(text)) || !(json = jQuery.parseJSON(json))) {			json = {				firstRun: true,				size: {					width: 900,					height: 680				},				envs: {},				hosts: Host.getJsonFromText(text)			};		}		return json;	}};var Editor = {	main: $('#main'),	env: $('#env'),	foot: $('#foot'),	getGroupElement: function(json, context){		return (context || Editor.main).find('dl[domain="' + json.d + '"]');	},	getItemElement: function(json, context){		return (json.jquery ? json : Editor.getGroupElement(json, context)).find('dd[ip="' + json.i + '"]');	},	getRuleData: function($dd, dm){		return {			s: $dd.hasClass('selected') ? '' : '#',			i: $dd.attr('ip'),			d: dm || $dd.parent().attr('domain')		};	},	renderDom: function(json){		Editor.renderHosts(json.hosts, json.firstRun);		Editor.renderEnvs(json.envs, json.firstRun);		delete json.firstRun;	},	renderHosts: function(json, firstRun){		var isEmpty, $dls, $dds = $(''), $dl, $dd, temp = '<dd class="ui-corner-all" ip="{i}" sharp="{s}">{i}</dd>';		if (!(isEmpty = !Editor.main.find('dl').size())) {			$.each(json, function(dm, o){				if (($dl = Editor.getGroupElement(o.r[0])).size()) {					o.r = $.grep(o.r, function(obj){						var $dd = $dl.find('dd[ip="' + obj.i + '"]'), isExist = !!$dd.size();						isExist && Host[obj.s ? 'disable' : 'enable']($dd);						return !isExist;					});					if (o.r.length) {						$dd = $.format(temp, o.r);						$dl.find('dt').after($dd);						$dds = $dds.add($dd);					}					delete json[dm];				}			});		}		$dls = $(Editor.genHostsHtml(json)).each(function(){			Host.enable($('dd[sharp=""]:first', this));		}).appendTo(Editor.main);		if (firstRun && isEmpty || !firstRun && !isEmpty) {			$dls.masonry({				callback: firstRun ? undefined : function(){					Editor.save(null);				},				isAnimated: !firstRun,				reverse: !firstRun && !isEmpty			});		}		Editor.rulesDDable($dls);		$dds = $dds.add($dls.find('dd:first'));		return $dds;	},	renderEnvs: function(json, firstRun){		if ($.isEmptyObject(json)) { return $(''); }		var html = $.map(json, function(o, envName){ return ['<h3 class="ellipsis" envname="', envName, '" active="', !!o.active, '">', envName, '</h3><div class="env_rules">', Editor.genHostsHtml(o.r), '</div>'].join(''); }).join('');		var $elems = $(html).appendTo(Editor.env);		Editor.envAccordion($elems.filter('h3:[active="true"]').first());		Editor.envsDDable($elems);		return $elems;	},	envAccordion: function(active){		Editor.env.accordion({			active: active,			change: function(evt, ui){				var msg;				if (ui.newHeader) {					if (ui.oldHeader) {						ui.oldContent.find('dd').each(function(_, dd){							Host.disable(Editor.getItemElement(Editor.getRuleData($(dd))));						});						msg = '已经从“' + ui.oldHeader.attr('envname') + '”切换到“' + ui.newHeader.attr('envname') + '”';					} else {						msg = '已经切换到“' + ui.newHeader.attr('envname') + '”';					}					ui.newContent.find('dd').each(function(_, dd){						Host.enable(Editor.getItemElement(Editor.getRuleData($(dd))));					});				} else if (ui.oldHeader) {					ui.oldContent.find('dd').each(function(_, dd){						Host.disable(Editor.getItemElement(Editor.getRuleData($(dd))));					});					msg = '已经离开' + ui.oldHeader.attr('envname');				}				Editor.save(msg);			}		});	},	genHostsHtml: function(json){		var temp = '<dd class="ui-corner-all" ip="{i}" sharp="{s}">{i}</dd>';		return $.map(json, function(o, dm){			return ['<dl class="ui-corner-all" domain="', dm, '"', o.p ? (' style="left:' + o.p.left + 'px; top:' + o.p.top + 'px;"') : '', '><dt class="ellipsis" domain="', dm, '">', dm, '</dt>', $.format(temp, o.r || o), '</dl>'].join('');		}).join('');	},	getHostsData: function($container){		var $container = $container || Editor.main, isMain = $container.attr('id') == 'main', $dlHosts = $container.find("dl").add($container.filter('dl')), json = {};		$dlHosts.each(function(_, dl){			var $dl = $(dl), $dds = $dl.find('dd'), dm = $dl.attr('domain');			json[dm] = {				p: isMain ? $dl.position() : {					"top": 0,					"left": 0				},				r: []			};			$dds.each(function(_, dd){				json[dm].r.push(Editor.getRuleData($(dd), dm));			});		});		return json;	},	getEnvsData: function(){		var $dlEnvs = $("#env h3"), json = {};		$dlEnvs.each(function(_, head){			var $head = $(head);			json[$head.attr('envname')] = {				r: Editor.getHostsData($head.next()),				active: $head.hasClass('ui-accordion-selected')			};		});		return json;	},	getHostsText: function(json, noSharp){		var R = '\r\n', ar = [R];		$.each(json || Editor.getHostsData(), function(dm, c){			$.each(c.r, function(_, o){				ar[o.s ? 'push' : 'unshift']((noSharp ? '' : o.s) + o.i + ' ' + dm);			});		});		return $.trim(ar.join(R));	},	getFileTextFromDom: function(){		Json.hosts = Editor.getHostsData();		Json.envs = Editor.getEnvsData();		return ['#WELL#', JSON.stringify(Json), '\r\n##※温馨提示：亲，第一行内容为HostEditor4.0软件的配置，非懂勿动※##\r\n\r\n', Editor.getHostsText(Json.hosts)].join('');	},	save: function(msg){		File.writeHost(Editor.getFileTextFromDom());		msg !== null && $.message(msg || '保存成功');	},	getDragOpt: function(opt){		return $.extend({			helper: 'clone',			appendTo: 'body',			scroll: false,			opacity: 0.75,			revert: 'invalid',			revertDuration: 200		}, opt);	},	getDropOpt: function(opt){		return $.extend({			accept: 'dd, h3,dl',			greedy: true,			tolerance: 'pointer',			hoverClass: 'drophover'		}, opt);	},	rulesDDable: function($elem){		($elem || Editor.main.find("dl")).draggable({			handle: 'dt',			opacity: 0.75,			containment: 'parent',			stack: 'dl',			stop: function(){				Editor.save(null);			}		});		($elem || Editor.main).find("dd").draggable(Editor.getDragOpt());		($elem || Editor.main.find("dl")).droppable(Editor.getDropOpt({			accept: 'dd',			drop: function(evt, ui){				var $drop = $(evt.target), $drag = ui.draggable, dm = $drop.attr('domain'), ip = $drag.attr('ip'), txt;				if ($drop.has($drag).size()) {					Host.copy(txt = ip + ' ' + dm), $.message('已复制：' + txt);				} else {					if ($drop.has('dd[ip="' + ip + '"]').size()) {						$.message('域名' + dm + '下已经有ip为' + ip + '的配置了');					} else {						Host.disable($drag.clone().hide()).appendTo($drop).slideDown();						Editor.rulesDDable($drop);						Editor.save();					}				}			}		}));	},	envsDDable: function($elem){		($elem ? $elem.filter("h3") : Editor.env.find("h3")).draggable(Editor.getDragOpt());		($elem ? $elem.find("dl") : Editor.env.find("dl")).draggable(Editor.getDragOpt());		($elem ? $elem.filter("h3,div") : Editor.env.find("h3,div")).droppable(Editor.getDropOpt({			drop: function(evt, ui){				var $drop = $(evt.target), $drag = ui.draggable;				switch ($drag[0].nodeName) {					case 'DD':						$drop = $drop.filter('h3').size() ? $drop.next() : $drop;						var o = Editor.getRuleData($drag), json, $dl, addToEnv = function(){							(json = {})[o.d] = {								r: [o]							};							Host.enable($drag);							var $dl = $(Editor.genHostsHtml(json)).hide();							$dl.appendTo($drop).slideDown();							Editor.envsDDable($drop);							Editor.save();						};						($dl = Editor.getGroupElement(o, $drop)).size() ? (Editor.getItemElement(o, $drop).size() ? $.message('已经有同样的规则，不需要添加') : $.confirm('该环境中已经有一个' + o.d + '的域名了,要替换原来的吗？', {							onOk: function(){								$dl.remove();								addToEnv();							}						})) : addToEnv();						break;					case 'DL':						var $dd = $drag.find('dd'), $group = $drop.add($drop.filter('h3').size() ? $drop.next() : $drop.prev());						if ($group.find($drag).size()) {							var dm = $drag.attr('domain'), ip = $dd.attr('ip'), txt;							Host.copy(txt = ip + ' ' + dm), $.message('已复制：' + txt);						} else {							var o = Editor.getRuleData($dd), json, $dl, addToEnv = function(){								(json = {})[o.d] = {									r: [o]								};								var $dl = $(Editor.genHostsHtml(json)).hide();								$dl.appendTo($group.filter('div')).slideDown();								Editor.envsDDable($group.filter('div'));								Editor.save();							};							($dl = Editor.getGroupElement(o, $group)).size() ? (Editor.getItemElement(o, $group).size() ? $.message('已经有同样的规则，不需要添加') : $.confirm('该环境中已经有一个' + o.d + '的域名了,要替换原来的吗？', {								onOk: function(){									$dl.remove();									addToEnv();								}							})) : addToEnv();						}						break;					case 'H3':						var $div = $drag.next(), json = Editor.getHostsData($div);						Host.copy(txt = Editor.getHostsText(json, true)), $.message('已复制');						break;				}			}		}));	},	containerDroppable: function(){		Editor.main.droppable(Editor.getDropOpt({			drop: function(evt, ui){				var $drag = ui.draggable;				switch ($drag[0].nodeName) {					case 'DD':						var $dl = $drag.parent(), dm = $dl.attr('domain'), ip = $drag.attr('ip');						$.confirm('确定要删除 “' + ip + ' ' + dm + '” 吗？', {							onOk: function(){								$drag.slideUp(200, function(){									$drag.remove();									Editor.save('删除成功');								});							}						});						break;					case 'H3':						var envName = $drag.attr('envname');						$.confirm('确定要删除 “' + envName + '” 吗？', {							onOk: function(){								$drag.add($drag.next()).slideUp(200, function(){									$drag.add($drag.next()).remove();									Editor.save('删除成功');								});							}						});						break;					case 'DL':						if (!Editor.main.find($drag).size()) {							var envName = $drag.parent().prev().attr('envname');							$.confirm('确定要从 “' + envName + '” 中删除吗？', {								onOk: function(){									$drag.slideUp(200, function(){										$drag.remove();										Editor.save('删除成功');									});								}							});						}						break;				}			}		}));		Editor.env.droppable(Editor.getDropOpt({			drop: function(evt, ui){				var $drag = ui.draggable;				switch ($drag[0].nodeName) {					case 'DD':						if (Editor.env.find('input').size()) { return $.message('当前正在编辑环境名称'); }						var json = {}, o = Editor.getRuleData($drag);						json[o.d] = o;						var $curr = Editor.renderEnvs({							'请输入环境名称': {								active: true,								r: json							}						});						$curr.filter('h3').trigger('contextmenu');						break;					case 'H3':						var envName = $drag.attr('envname');						$.confirm('确定要删除 “' + envName + '” 吗？', {							onOk: function(){								$drag.add($drag.next()).slideUp(200, function(){									$drag.add($drag.next()).remove();									Editor.save('删除成功');								});							}						});						break;					case 'DL':						var envName = $drag.parent().prev().attr('envname');						$.confirm('确定要从 “' + envName + '” 中删除吗？', {							onOk: function(){								$drag.slideUp(200, function(){									$drag.remove();									Editor.save('删除成功');								});							}						});						break;				}			}		}));	},	containerEditable: function(){		Editor.main.editable({			attr: 'ip',			create: function($dd){				$.message('请输入IP地址');			},			check: function(val, $dd, backup){				var rIp = /^(0|[1-9]\d?|1\d\d|2[0-4]\d|25[0-5])\.(0|[1-9]\d?|1\d\d|2[0-4]\d|25[0-5])\.(0|[1-9]\d?|1\d\d|2[0-4]\d|25[0-5])\.(0|[1-9]\d?|1\d\d|2[0-4]\d|25[0-5])$/;				if (!rIp.test(val)) { return '错误的格式，请输入正确格式的IP地址'; }				if ($dd.parent().find('dd[ip="' + val + '"]').not($dd).size()) { return '重复的IP，请输入一个不同的IP地址'; }				return true;			},			complete: function(val, $dd, backup){				if (val != backup) {					Editor.save();					$.message('保存成功');				}			}		});		Editor.env.editable({			selector: 'h3',			attr: 'envname',			create: function($h){				$.message('请输入环境名称');			},			check: function(val, $h, backup){				if (!val) { return '亲，环境都得有个名的'; }				if (Editor.env.find('h3[envname="' + val + '"]').not($h).size()) { return '亲，环境名重复了，换一个吧'; }				return true;			},			complete: function(val, $h, backup){				if (val != backup) {					Editor.save();				}			}		});	},	initFootBar: function(){		Editor.foot.find('*[id]').click(function(evt, fn){			(fn = Cmd[$(this).attr('id')]) && fn.apply(this, [evt]);		});		Editor.foot.find('*[expand]').click(function(evt){			var $el = $(this).hide(), expandType = $el.attr('expand'), $tars = $el.siblings('.' + expandType), $bdy = $('body');			$el.parent().click();			var turnBack = function(evt){				$tars.hide(), $el.fadeIn();				$tars.add($bdy).unbind('click', turnBack);			};			$tars.fadeIn().add($bdy).one('click', turnBack);			return false;		});	},	rulesSwitchable: function(){		Editor.main.find('dd').live('click', function(evt){			var $dd = $(this);			Host[Host.isEnabled($dd) ? 'disable' : 'enable']($dd);			Editor.syncEnv();			Editor.save();		});	},	//检查是否不命中当前环境，或者命中了另一个环境（要选中最多的一个）	syncEnv: function(){		var $dds = Host.getAllEffect(), oRules = {};		$dds.each(function(o, dd){			o = Editor.getRuleData($(dd));			oRules[o.d + '_' + o.i] = true;		});				var $contents = Editor.env.accordion('getContents'), arNums = [];				var $match = $.grep($contents.toArray(), function(cont, _){			var $elems = $('dd', cont), size = $elems.size(), isMatch = true;			$elems.each(function(o, dd){				o = Editor.getRuleData($(dd));				if (!oRules[o.d + '_' + o.i]) { return isMatch = false; }			});			isMatch && arNums.push(size)			return isMatch;		});		if ($match.length) {			var max = Math.max.apply(0, arNums), idx = $.inArray(max, arNums);			Editor.env.accordion('enable', $($match[idx]));		}		//...		//如果想要组合环境怎么办？	},	domainCopyable: function(){		Editor.main.add(Editor.env).find('dt').live('dblclick', function(evt){			Host.copy(txt = Editor.getHostsText(Editor.getHostsData($(this).parent()), true)), $.message('已复制');		});	},	initBehavior: function(json){		$('div.watermark').fadeIn();		Editor.containerDroppable();		Editor.rulesSwitchable();		Editor.domainCopyable();		Editor.containerEditable();		Editor.initFootBar();		return;	}};var Cmd = {	masonryTop: function(){		Editor.main.find('dl').masonry({			callback: function(){				Editor.save(null);			}		});	},	masonryBottom: function(){		Editor.main.find('dl').masonry({			reverse: true,			callback: function(){				Editor.save(null);			}		});	},	openFile: function(evt){		File.openFile();	},	openIE: function(evt){		File.openIE();	},	openFolder: function(evt){		File.openFolder();	},	openAddWin: function(evt){		$('<textarea class="add-hosts-area"></textarea>').dialog({			title: '请输入：',			onShow: function(dialog){				Host.paste(dialog.data.find('textarea'));			},			buttons: [{				html: '添加为方案',				close: true,				click: function(evt, $cont){					var json = Host.getJsonFromText($cont.find('textarea').val());					Editor.renderHosts($.extend(true, {}, json));					$.each(json, function(dm, rules){						rules.r.length = 1;					});					var $curr = Editor.renderEnvs({						'请输入环境名称': {							active: true,							r: json						}					});					$curr.filter('h3').trigger('contextmenu');				}			}, {				html: '添加',				close: true,				click: function(evt, $cont){					var json = Host.getJsonFromText($cont.find('textarea').val());					Editor.renderHosts(json);				}			}, {				html: '关闭',				attr: {					'class': 'simplemodal-close'				}			}]		});	},	about: function(){		$.alert('<div class="about">\
		<p>作者：梅雪香(meixx)</p><p>日期：2011-11-11</p>\
		<p>版本：4.0</p>\
		<p>网址：<a href="http://www.mjser.com/">官方网站</a></p>\
		<p>赞助：支付宝：wy_hd@163.com</p><p>　　　财付通：4948750</p></div>', {			title: '关于HostEditor'		});	},	more: function(){	}};function init(){	//$(document).bind('contextmenu', function(evt){evt.preventDefault();})	if (!File.isHostsThere()) { return $.alert('不好意思, 程序找不到hosts文件'); }	var text = $.trim(File.readHost());	Json = Host.readConfig(text);	//Json.firstRun && File.backup();	Wnd.setRect(Json.size.width, Json.size.height);	Editor.initBehavior(Json);	Editor.renderDom(Json);}$(init);